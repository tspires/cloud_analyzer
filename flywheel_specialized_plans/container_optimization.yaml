name: "Container Services Cost Optimization"
description: "Analyze and optimize container services across AWS ECS/EKS, Azure AKS, and GCP GKE"
variables:
  cloud_provider: "aws"
  cluster_name: ""
  namespace: "default"
  
steps:
  - prompt: |
      Analyze container cluster resources for {{cloud_provider}}:
      
      For AWS EKS:
      1. Get cluster info: aws eks describe-cluster --name {{cluster_name}}
      2. List node groups: aws eks list-nodegroups --cluster-name {{cluster_name}}
      3. Get node metrics: kubectl top nodes
      4. Get pod distribution: kubectl get pods --all-namespaces -o wide | awk '{print $8}' | sort | uniq -c
      
      For Azure AKS:
      1. Get cluster info: az aks show --name {{cluster_name}} --resource-group RG
      2. List node pools: az aks nodepool list --cluster-name {{cluster_name}} --resource-group RG
      3. Get node metrics: kubectl top nodes
      
      For GCP GKE:
      1. Get cluster info: gcloud container clusters describe {{cluster_name}}
      2. List node pools: gcloud container node-pools list --cluster={{cluster_name}}
      3. Get utilization: kubectl top nodes
      
      Analyze:
      - Node utilization (CPU/Memory)
      - Pod density per node
      - Node pool configurations
    description: "Analyze container cluster"
    saveOutput: "cluster_analysis"

  - prompt: |
      Based on cluster analysis: {{cluster_analysis}}
      
      Analyze workload patterns:
      1. Identify nodes with < 50% utilization
      2. Find workloads with no resource requests/limits
      3. Detect over-provisioned pods
      4. Analyze pod scheduling inefficiencies
      
      For each namespace:
      kubectl top pods -n {{namespace}} --no-headers | awk '{print $1, $2, $3}'
      
      Calculate:
      - Wasted resources from over-provisioning
      - Potential savings from node consolidation
      - Right-sizing recommendations for workloads
    description: "Analyze workload efficiency"
    saveOutput: "workload_analysis"

  - prompt: |
      Generate container optimization recommendations based on:
      - Cluster Analysis: {{cluster_analysis}}
      - Workload Analysis: {{workload_analysis}}
      
      Recommendations:
      1. Node Pool Optimization:
         - Resize node pools based on actual usage
         - Switch to spot/preemptible instances for stateless workloads
         - Enable cluster autoscaling with proper limits
      
      2. Workload Optimization:
         - Set resource requests/limits for all pods
         - Implement horizontal pod autoscaling
         - Use vertical pod autoscaling for right-sizing
      
      3. Scheduling Optimization:
         - Implement pod disruption budgets
         - Use node affinity for better bin packing
         - Enable bin packing scheduling
      
      Calculate savings for each recommendation.
    description: "Generate optimization recommendations"
    saveOutput: "container_optimizations"

  - prompt: |
      Create Kubernetes manifests and scripts to implement: {{container_optimizations}}
      
      Generate:
      1. Updated deployment manifests with resource limits
      2. HPA (Horizontal Pod Autoscaler) configurations
      3. Node pool update commands
      4. Cluster autoscaler configuration
      
      Include monitoring queries to track the impact.
    description: "Generate implementation artifacts"